#lang racket
;  AOC 2021
; Leo Laporte 9-Dec-21
; 
; --- Day 6: Lanternfish ---
; 
; The sea floor is getting steeper. Maybe the sleigh keys got carried this way?
; 
; A massive school of glowing lanternfish swims past. They must spawn quickly to reach such
; large numbers - maybe exponentially quickly? You should model their growth rate to be sure.
; 
; Although you know nothing about this specific species of lanternfish, you make some guesses
; about their attributes. Surely, each lanternfish creates a new lanternfish once every 7 days.
; 
; However, this process isn't necessarily synchronized between every lanternfish - one
; lanternfish might have 2 days left until it creates another lanternfish, while another
; might have 4. So, you can model each fish as a single number that represents the number of
; days until it creates a new lanternfish.
; 
; Furthermore, you reason, a new lanternfish would surely need slightly longer before it's
; capable of producing more lanternfish: two more days for its first cycle.
; 
; So, suppose you have a lanternfish with an internal timer value of 3:
; 
; After one day, its internal timer would become 2.
; After another day, its internal timer would become 1.
; After another day, its internal timer would become 0.
; After another day, its internal timer would reset to 6, and it would create a new lanternfish
; with an internal timer of 8.
; After another day, the first lanternfish would have an internal timer of 5, and the second
; lanternfish would have an internal timer of 7.
; A lanternfish that creates a new fish resets its timer to 6, not 7 (because 0 is included
; as a valid timer value). The new lanternfish starts with an internal timer of 8 and does
; not start counting down until the next day.
; 
; Realizing what you're trying to do, the submarine automatically produces a list of the ages
; of several hundred nearby lanternfish (your puzzle input). For example, suppose you were
; given the following list:
; 
; 3,4,3,1,2
; This list means that the first fish has an internal timer of 3, the second fish has an
; internal timer of 4, and so on until the fifth fish, which has an internal timer of 2.
; Simulating these fish over several days would proceed as follows:
; 
; Initial state: 3,4,3,1,2
; After  1 day:  2,3,2,0,1
; After  2 days: 1,2,1,6,0,8
; After  3 days: 0,1,0,5,6,7,8
; After  4 days: 6,0,6,4,5,6,7,8,8
; After  5 days: 5,6,5,3,4,5,6,7,7,8
; After  6 days: 4,5,4,2,3,4,5,6,6,7
; After  7 days: 3,4,3,1,2,3,4,5,5,6
; After  8 days: 2,3,2,0,1,2,3,4,4,5
; After  9 days: 1,2,1,6,0,1,2,3,3,4,8
; After 10 days: 0,1,0,5,6,0,1,2,2,3,7,8
; After 11 days: 6,0,6,4,5,6,0,1,1,2,6,7,8,8,8
; After 12 days: 5,6,5,3,4,5,6,0,0,1,5,6,7,7,7,8,8
; After 13 days: 4,5,4,2,3,4,5,6,6,0,4,5,6,6,6,7,7,8,8
; After 14 days: 3,4,3,1,2,3,4,5,5,6,3,4,5,5,5,6,6,7,7,8
; After 15 days: 2,3,2,0,1,2,3,4,4,5,2,3,4,4,4,5,5,6,6,7
; After 16 days: 1,2,1,6,0,1,2,3,3,4,1,2,3,3,3,4,4,5,5,6,8
; After 17 days: 0,1,0,5,6,0,1,2,2,3,0,1,2,2,2,3,3,4,4,5,7,8
; After 18 days: 6,0,6,4,5,6,0,1,1,2,6,0,1,1,1,2,2,3,3,4,6,7,8,8,8,8
; 
; Each day, a 0 becomes a 6 and adds a new 8 to the end of the list, while each other
; number decreases by 1 if it was present at the start of the day.
; 
; In this example, after 18 days, there are a total of 26 fish. After 80 days, there would
; be a total of 5934.
; 
; Find a way to simulate lanternfish. How many lanternfish would there be after 80 days?


(require racket/file threading rackunit)

;; (list-of Natural) -> Vector
;; given a list of single digit numbers return a vector with the counts for each
(define (rle list)
  (for/vector ([i (in-range 0 10)])
    (count (Î» (x) (equal? i x)) list)))

;; Problem input from adventofcode.com
(define input (~> (file->string "input6.txt")  ; read in raw data
                  (string-split _ "\n")     ; cut pesky little \n at end
                  (first _)                 ; turn it back into string
                  (string-split _ ",")      ; chop it up into 300 strings
                  (map string->number _)    ; turn each string into a number
                  (rle _)))                 ; run-length encoding turns it into a vector 
                   
;; Provided test data
(define sample-data (rle '(3 4 3 1 2))) 

;; Vector Natural -> Natural
;; Given a vector representing the current fish population and the number of days
;; to breed, return the new number of fish
(define (breed-lanternfish fish days)
  (for ([d (in-range 0 days)])
    (set! fish (next-generation fish)))
  (apply + (rest (reverse (vector->list fish))))) ; drop the 9 position before adding
  
;; Vector -> Vector
;; given a vector of fish counts 
(define (next-generation fish)
  (let ([f (vector-rotate-left fish)])  ; subtract a day - vector-ref 9 is unused
    (vector-set! f 6 (+ (vector-ref f 9) (vector-ref f 6))) ; fish starting over
    (vector-set! f 8 (vector-ref f 9)) ; add newborns
    f))

;; Vector -> Vector
;; rotates a vector left, moving 0 position to 9
(define (vector-rotate-left v)
  (local [(define (rotate-left l)
            (append (rest l) (cons (first l) empty)))]
    (list->vector (rotate-left (vector->list v)))))

(module+ test
  (check-equal? (vector-rotate-left (list->vector '(0 1 2 3 4 5 6 7 8 9)))
                (list->vector '(1 2 3 4 5 6 7 8 9 0))))

(module+ test
  (check-equal? (breed-lanternfish sample-data 18) 26)
  (check-equal? (breed-lanternfish sample-data 80) 5934))

(time (printf "2021 AOC Problem 6.1 = ~a\n" (breed-lanternfish input 80)))

;  --- Part Two ---
; 
; Suppose the lanternfish live forever and have unlimited food and space.
; Would they take over the entire ocean?
; 
; After 256 days in the example above, there would be a total of 26984457539
; lanternfish!
; 
; How many lanternfish would there be after 256 days? 


;; Is there a mistake in the assignment? The example data is the same as the problem data!
;; Oh no I see, 256 days for the SAMPLE data. 
;; well in any event the number of fish grows so large I can't store them in memory
;; so clearly I'm going to have to compress the results. Ah! That's what run-length
;; encoding is for. And by replacing that massive and exponentially larger (list-of fish)
;; with a vector of length 9 representing the number of fish at each day of maturity
;; (0-8) I can massively reduce the compute time and memory requirements.

(module+ test
  (check-equal? (breed-lanternfish sample-data 256) 26984457539))

(time (printf "2021 AOC Problem 6.2 = ~a\n" (breed-lanternfish input 256)))

; Time to solve, in milliseconds, on a 2021 M1 Pro MacBook Pro 14" with 16GB RAM
;2021 AOC Problem 6.1 = 350917
;cpu time: 1 real time: 1 gc time: 0 (wow! a LOT faster using the RLE encoded population)
;2021 AOC Problem 6.2 = 1592918715629
;cpu time: 0 real time: 0 gc time: 0

; Real world timing
;      --------Part 1---------   --------Part 2--------
;Day       Time    Rank  Score       Time   Rank  Score
;  6       >24h   71604      0       >24h  67093      0
;  5       >24h   71260      0       >24h  68517      0
;  4       >24h   77972      0       >24h  75701      0
;  3       >24h  102352      0       >24h  88448      0
;  2   00:38:41   13051      0   01:06:26  14647      0
;  1   00:24:22    7349      0   12:27:40  59726      0