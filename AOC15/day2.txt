#lang racket
;  AOC 2021
; Day 2  I Was Told There Would Be No Math
; Leo Laporte 27-Nov-2015
; 
; --- Part One ---
; 
; The elves are running low on wrapping paper, and so they need to submit an order for more.
; They have a list of the dimensions (length l, width w, and height h) of each present, and only want
; to order exactly as much as they need.
; 
; Fortunately, every present is a box (a perfect right rectangular prism), which makes calculating the
; required wrapping paper for each gift a little easier: find the surface area of the box, which is
; 2*l*w + 2*w*h + 2*h*l. The elves also need a little extra paper for each present: the area of the
; smallest side.
; 
; For example:
; 
; A present with dimensions 2x3x4 requires 2*6 + 2*12 + 2*8 = 52 square feet of wrapping paper plus 6
; square feet of slack, for a total of 58 square feet.
; 
; A present with dimensions 1x1x10 requires 2*1 + 2*10 + 2*10 = 42 square feet of wrapping paper
; plus 1 square foot of slack, for a total of 43 square feet.
; 
; All numbers in the elves' list are in feet. How many total square feet of wrapping paper should they order?


(require racket/file rackunit)

;; Problem input from adventofcode.com
(define day2 (file->string "input2.txt"))

(define (day2.1 day2)
  "half the problem is parsing the input file from one big string->list of strings->list of lists of integer
  then do the math via map and add it all up with the foldl"
  (foldl + 0 (map dims->sqft (dim-strings->dim-list (string-split day2))))) 

;; list-of integer -> integer
(define (dims->sqft dims)
  "converts a list of three package dimensions (length, width, height) into the square feet required to wrap it,
  plus some slack as described in the problem as the area of the smallest side."
  (let* ([l (first dims)]
        [w (second dims)]
        [h (third dims)]
        [side1 (* l w)]
        [side2 (* w h)]
        [side3 (* h l)])
    (+ (* 2 side1) (* 2 side2) (* 2 side3) (min side1 side2 side3))))

(module+ test
  (check-equal? (dims->sqft (list 2 3 4)) 58)
  (check-equal? (dims->sqft (list 1 1 10)) 43))
  
(define (dim-strings->dim-list strings)
  "converts a list of dimension strings into a list of dimension lists"
  (map str->dim strings))

(define (str->dim str)
  "converts a string in the form of '1x2x3' into (list 1 2 3)"
  (let ([results (regexp-match #px"(\\d+)x(\\d+)x(\\d+)" str)])
    (list (string->number (second results))
          (string->number (third results))
          (string->number (fourth results)))))

(time (printf "2015 AOC Problem 2.1 = ~a\n" (day2.1 day2)))

;  --- Part Two ---
; 
; The elves are also running low on ribbon. Ribbon is all the same width, so they only have to worry
; about the length they need to order, which they would again like to be exact.
; 
; The ribbon required to wrap a present is the shortest distance around its sides, or the smallest
; perimeter of any one face. Each present also requires a bow made out of ribbon as well; the feet of
; ribbon required for the perfect bow is equal to the cubic feet of volume of the present. Don't ask
; how they tie the bow, though; they'll never tell.
; 
; For example:
; 
; A present with dimensions 2x3x4 requires 2+2+3+3 = 10 feet of ribbon to wrap the present
; plus 2*3*4 = 24 feet of ribbon for the bow, for a total of 34 feet.
; 
; A present with dimensions 1x1x10 requires 1+1+1+1 = 4 feet of ribbon to wrap the present
; plus 1*1*10 = 10 feet of ribbon for the bow, for a total of 14 feet.
; 
; How many total feet of ribbon should they order?


(define (day2.2 day2)
  "given a list of package dimensions return the amount of ribbon required to wrap all the packages"
  (foldl + 0 (map dim->ribbon (dim-strings->dim-list (string-split day2)))))

(define (dim->ribbon dims)
  "given a gift with the given length width and height calculate the amount of ribbon to wrap it"
  (let* ([min-perim (remove (apply max dims) dims)]                   ; find side with smallest perimeter
        [ribbon (+ (* 2 (first min-perim)) (* 2 (second min-perim)))] ; ribbon to wrap it
        [bow (apply * dims)])                                         ; bow to wrap it
    (+ ribbon bow)))

(module+ test
  (check-equal? (dim->ribbon (list 2 3 4)) 34)
  (check-equal? (dim->ribbon (list 1 1 10)) 14))

(time (printf "2015 AOC Problem 2.2 = ~a\n" (day2.2 day2)))